created: 20180901052828383
modified: 20180909214106162
module-type: widget
tags: 
title: $:/plugins/Guitlle/vuewiki/vuewrapper.js
type: application/javascript

/*\
title: $:/plugins/Guitlle/vuewiki/vuewrapper.js
type: application/javascript
module-type: widget
\*/
(function(){

/*jslint node: true, browser: true */
/*global $tw: false */
"use strict";

var Vue = require("$:/usr/lib/vue/vue.min.js"),
    Uiv = require("$:/usr/lib/vue/uiv/uiv.min.js"),
    Widget = require("$:/core/modules/widgets/widget.js").widget, 
    VueInstances = {}, UID = 0;

Vue.use(Uiv);

function bindTWField(objectClone, tiddler, field) {
    var blockUpdate = false;
    Object.defineProperty(objectClone, key, {
        get: function () {
            var tidObject = this.wiki.getTiddler(this.getVariable("currentTiddler")),
                value = null;
            try {
                value = JSON.parse(tidObject.fields[field]);
            }
            catch (e) {
                value = tidObject.fields[field];
            }
            return value;
        },
        set: function (newVal) { 
            if (blockUpdate) {
                blockUpdate = false;
                return;
            }
            var tidObject = this.wiki.getTiddler(this.getVariable("currentTiddler")),
                val = tidObject.fields[field];
            newVal = JSON.stringify(newVal);
            if (val == newVal) return;
            blockUpdate = true;
            that.wiki.setText(tiddler, field, null, newVal);
        }
    });
}

var VueWrapper = function(parseTreeNode,options) {
    this.initialise(parseTreeNode,options);
    this.importsMap = {};
};

VueWrapper.prototype = new Widget();

VueWrapper.prototype.refresh = function (changedTiddlers) {
    var that = this, selfData = {};
    Object.getOwnPropertyNames(changedTiddlers).forEach(function (tiddlerName) {
        if (that.importsMap[tiddlerName]) {
            that.app.$data.imports[that.importsMap[tiddlerName]] = that.importTiddler(tiddlerName);
        }
    });
    if (changedTiddlers[that.currentTiddler.fields.title]) {
        that.currentTiddler = that.wiki.getTiddler(that.getVariable("currentTiddler"));
        Object.assign(selfData, that.currentTiddler.fields);
        Object.getOwnPropertyNames(selfData).forEach(function (field) {
            if (!that.blockUpdate && field!=="text") {
                that.app.$data.self[field] = selfData[field];
            }
        });  
    }
};

VueWrapper.prototype.importTiddler = function(name) {
    var importTd = this.wiki.getTiddler(name),
        importData = {}, importProcessedData = {};
    // Temporary clone just to iterate over the object properties.
    // The TW native object is not iterable.
    Object.assign(importData, importTd.fields);
    Object.getOwnPropertyNames(importData).forEach(function (importField) {
        bindTWField(importProcessedData, name, importField)
    });
    delete importData;
    return importProcessedData;
};

VueWrapper.prototype.render = function(parent,nextSibling) {
    this.parentDomNode = parent;
    this.execute();
    this.currentTiddler = this.wiki.getTiddler(this.getVariable("currentTiddler"));
    var that = this,
        vueInstance = VueInstances[that.currentTiddler.fields.title],
        foundParentNode = (vueInstance !== undefined) && that.document.contains(vueInstance.$el),
        selfData = {}, imports = {}, watches = {};
    
    
    if (vueInstance !== undefined && !foundParentNode) {
        VueInstances[this.currentTiddler.fields.title].$destroy();
        delete VueInstances[this.currentTiddler.fields.title];
    }

    Object.assign(selfData, that.currentTiddler.fields);
    delete selfData.text;

    Object.getOwnPropertyNames(selfData).forEach(function (field) {
        if (field.startsWith("tiddler_")) {
            if (! that.importsMap[selfData[field]]) {
                var importNamespace = field.split("_")[1];
                if (importNamespace === "") return;
                imports[importNamespace] = that.importTiddler(selfData[field]);
                that.importsMap[selfData[field]] = importNamespace;
            }
        }
        else {
            try {
                selfData[field] = JSON.parse(selfData[field]);
            }
            catch (e) {
                selfData[field] = selfData[field];
            }
        }
    });
    
    if (vueInstance === undefined || !foundParentNode) {
        var domNode = this.document.createElement("div");
        parent.insertBefore(domNode,nextSibling);
        var watches = {};
        Object.getOwnPropertyNames(selfData).forEach(function (field) {
            if (field!=="text") {
                watches["self." + field] = {
                    handler: function (after, before){
                        that.app.blockUpdate = true;
                        that.wiki.setText(that.currentTiddler.fields.title,field,null,JSON.stringify(after));
                    }
                }
            }
        });
        this.app = VueInstances[this.currentTiddler.fields.title] = new Vue({
              el: domNode,
              template: this.parseTreeNode.children[0].value,
              data: {
                self: selfData,
                imports: imports
              },
              watch: watches,
              methods: {
              }
            });
        this.app.blockUpdate = false;
    }
    else {
        this.app = VueInstances[this.currentTiddler.fields.title];
        Object.getOwnPropertyNames(selfData).forEach(function (field) {
            if (!that.app.blockUpdate && field!=="text") {
                that.app.$data.self[field] = selfData[field];
            }
        });  
        this.app.blockUpdate = false;
    }
};

exports.vuewrapper = VueWrapper;

})();
